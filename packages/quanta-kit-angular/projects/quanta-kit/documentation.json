{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-9abd5583b8f20481b318f18d3791fa4adc4b91a8cf0320479ea6240b78bb9598b77666c9e936ad4fa55e11202e9ca5d1dd9e417ca1bb8990318e7a57e31cf0ea",
            "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qk-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nARIA label for accessibility",
                    "description": "<p>ARIA label for accessibility</p>\n",
                    "line": 86,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ariaPressed",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nARIA pressed state for toggle buttons",
                    "description": "<p>ARIA pressed state for toggle buttons</p>\n",
                    "line": 89,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCustom CSS classes to apply",
                    "description": "<p>Custom CSS classes to apply</p>\n",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the button is disabled",
                    "description": "<p>Whether the button is disabled</p>\n",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fullWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the button should take full width",
                    "description": "<p>Whether the button should take full width</p>\n",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideTextOnLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether to hide text content when loading",
                    "description": "<p>Whether to hide text content when loading</p>\n",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the button is in loading state",
                    "description": "<p>Whether the button is in loading state</p>\n",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rounded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the button has rounded corners",
                    "description": "<p>Whether the button has rounded corners</p>\n",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nButton size",
                    "description": "<p>Button size</p>\n",
                    "line": 59,
                    "type": "ButtonSize",
                    "decorators": []
                },
                {
                    "name": "square",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the button has no border radius",
                    "description": "<p>Whether the button has no border radius</p>\n",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "testId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTest ID for testing purposes",
                    "description": "<p>Test ID for testing purposes</p>\n",
                    "line": 92,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nButton type attribute",
                    "description": "<p>Button type attribute</p>\n",
                    "line": 62,
                    "type": "ButtonType",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nButton variant/style",
                    "description": "<p>Button variant/style</p>\n",
                    "line": 56,
                    "type": "ButtonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "blurred",
                    "defaultValue": "new EventEmitter<FocusEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBlur event emitter",
                    "description": "<p>Blur event emitter</p>\n",
                    "line": 101,
                    "type": "EventEmitter"
                },
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nClick event emitter",
                    "description": "<p>Click event emitter</p>\n",
                    "line": 95,
                    "type": "EventEmitter"
                },
                {
                    "name": "focused",
                    "defaultValue": "new EventEmitter<FocusEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFocus event emitter",
                    "description": "<p>Focus event emitter</p>\n",
                    "line": 98,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles button blur events.\n",
                    "description": "<p>Handles button blur events.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3637,
                                "end": 3642,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3631,
                                "end": 3636,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The blur event</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles button click events.\nPrevents action if button is disabled or loading.\n",
                    "description": "<p>Handles button click events.\nPrevents action if button is disabled or loading.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3269,
                                "end": 3274,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3263,
                                "end": 3268,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mouse click event</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleFocus",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles button focus events.\n",
                    "description": "<p>Handles button focus events.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3482,
                                "end": 3487,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "event"
                            },
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3476,
                                "end": 3481,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The focus event</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "<p>A customizable button component with multiple variants, sizes, and states.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">```html\n&lt;qk-button variant=&quot;primary&quot; size=&quot;lg&quot; (clicked)=&quot;handleClick()&quot;&gt;\n  Click me\n&lt;/qk-button&gt;</code></pre></div><b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-none\"></code></pre></div>",
            "rawdescription": "\n\nA customizable button component with multiple variants, sizes, and states.\n\n```html\n```html\n<qk-button variant=\"primary\" size=\"lg\" (clicked)=\"handleClick()\">\n  Click me\n</qk-button>\n```\n```",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostBinding,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/** Supported button visual variants */\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'danger'\n  | 'warning'\n  | 'info'\n  | 'light'\n  | 'dark'\n  | 'outline-primary'\n  | 'outline-secondary'\n  | 'outline-success'\n  | 'outline-danger'\n  | 'outline-warning'\n  | 'outline-info'\n  | 'outline-light'\n  | 'outline-dark';\n\n/** Supported button sizes */\nexport type ButtonSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/** Supported button types for form submission */\nexport type ButtonType = 'button' | 'submit' | 'reset';\n\n/**\n * A customizable button component with multiple variants, sizes, and states.\n *\n * @example\n * ```html\n * <qk-button variant=\"primary\" size=\"lg\" (clicked)=\"handleClick()\">\n *   Click me\n * </qk-button>\n * ```\n */\n@Component({\n  selector: 'qk-button',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonComponent {\n  /** Button variant/style */\n  @Input() variant: ButtonVariant = 'primary';\n\n  /** Button size */\n  @Input() size: ButtonSize = 'md';\n\n  /** Button type attribute */\n  @Input() type: ButtonType = 'button';\n\n  /** Whether the button is disabled */\n  @Input() disabled = false;\n\n  /** Whether the button is in loading state */\n  @Input() loading = false;\n\n  /** Whether to hide text content when loading */\n  @Input() hideTextOnLoading = false;\n\n  /** Whether the button should take full width */\n  @Input() fullWidth = false;\n\n  /** Whether the button has rounded corners */\n  @Input() rounded = false;\n\n  /** Whether the button has no border radius */\n  @Input() square = false;\n\n  /** Custom CSS classes to apply */\n  @Input() customClass = '';\n\n  /** ARIA label for accessibility */\n  @Input() ariaLabel = '';\n\n  /** ARIA pressed state for toggle buttons */\n  @Input() ariaPressed: boolean | null = null;\n\n  /** Test ID for testing purposes */\n  @Input() testId = '';\n\n  /** Click event emitter */\n  @Output() clicked = new EventEmitter<MouseEvent>();\n\n  /** Focus event emitter */\n  @Output() focused = new EventEmitter<FocusEvent>();\n\n  /** Blur event emitter */\n  @Output() blurred = new EventEmitter<FocusEvent>();\n\n  /**\n   * Computes the CSS classes for the button based on current state and properties.\n   * @returns A space-separated string of CSS classes\n   */\n  get buttonClasses(): string {\n    const classes = [\n      'qk-btn',\n      `qk-btn--${this.variant}`,\n      `qk-btn--${this.size}`,\n    ];\n\n    if (this.fullWidth) {\n      classes.push('qk-btn--full-width');\n    }\n\n    if (this.rounded) {\n      classes.push('qk-btn--rounded');\n    }\n\n    if (this.square) {\n      classes.push('qk-btn--square');\n    }\n\n    if (this.loading) {\n      classes.push('qk-btn--loading');\n    }\n\n    if (this.disabled) {\n      classes.push('qk-btn--disabled');\n    }\n\n    if (this.customClass) {\n      classes.push(this.customClass);\n    }\n\n    return classes.join(' ');\n  }\n\n  /**\n   * Handles button click events.\n   * Prevents action if button is disabled or loading.\n   * @param event The mouse click event\n   */\n  handleClick(event: MouseEvent): void {\n    if (!this.disabled && !this.loading) {\n      this.clicked.emit(event);\n    }\n  }\n\n  /**\n   * Handles button focus events.\n   * @param event The focus event\n   */\n  handleFocus(event: FocusEvent): void {\n    this.focused.emit(event);\n  }\n\n  /**\n   * Handles button blur events.\n   * @param event The blur event\n   */\n  handleBlur(event: FocusEvent): void {\n    this.blurred.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../../../quanta-kit-styles/src/components/button.module.scss' as *;\r\n\r\n// All button styles are now provided by the shared quanta-kit-styles package.\r\n// This file only includes the shared module. Remove all local styles.\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "buttonClasses": {
                    "name": "buttonClasses",
                    "getSignature": {
                        "name": "buttonClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 107,
                        "rawdescription": "\n\nComputes the CSS classes for the button based on current state and properties.\n",
                        "description": "<p>Computes the CSS classes for the button based on current state and properties.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 2503,
                                "end": 2555,
                                "kind": 342,
                                "id": 0,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "tagName": {
                                    "pos": 2504,
                                    "end": 2511,
                                    "kind": 80,
                                    "id": 0,
                                    "flags": 16842752,
                                    "transformFlags": 0,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>A space-separated string of CSS classes</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<button\r\n  [type]=\"type\"\r\n  [disabled]=\"disabled || loading\"\r\n  [class]=\"buttonClasses\"\r\n  (click)=\"handleClick($event)\"\r\n  (focus)=\"handleFocus($event)\"\r\n  (blur)=\"handleBlur($event)\"\r\n  [attr.aria-label]=\"ariaLabel\"\r\n  [attr.aria-pressed]=\"ariaPressed\"\r\n  [attr.data-testid]=\"testId\"\r\n>\r\n  <span *ngIf=\"loading\" class=\"qk-btn-spinner\" aria-hidden=\"true\"></span>\r\n  <ng-content select=\"[slot=icon-left]\"></ng-content>\r\n  <span class=\"qk-btn-content\" [class.qk-btn-content--hidden]=\"loading && hideTextOnLoading\">\r\n    <ng-content></ng-content>\r\n  </span>\r\n  <ng-content select=\"[slot=icon-right]\"></ng-content>\r\n</button>\r\n"
        },
        {
            "name": "ChipComponent",
            "id": "component-ChipComponent-9647632f9e2659fdc4f2d7a79ed2d1c99f6d6ee833766eff416f10408617f69f67b09d1ca7b0db58f3bf19b6ab59ea62b234b27d8e363fe720bf2417556ba45c",
            "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qk-chip",
            "styleUrls": [
                "./chip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ariaPressed",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "clickable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "customClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "elevation",
                    "defaultValue": "'flat'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "ChipElevation",
                    "decorators": []
                },
                {
                    "name": "hasAvatar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasLeadingIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasTrailingIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inList",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "removable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "removeAriaLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ChipSize",
                    "decorators": []
                },
                {
                    "name": "testId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'assist'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "ChipVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "blurred",
                    "defaultValue": "new EventEmitter<FocusEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter"
                },
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                },
                {
                    "name": "focused",
                    "defaultValue": "new EventEmitter<FocusEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "EventEmitter"
                },
                {
                    "name": "removed",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getAriaLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRemoveAriaLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTabIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFocus",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRemove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRemoveKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nexport type ChipVariant = 'assist' | 'filter' | 'input' | 'suggestion';\nexport type ChipSize = 'sm' | 'md';\nexport type ChipElevation = 'flat' | 'elevated';\n\n@Component({\n  selector: 'qk-chip',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './chip.component.html',\n  styleUrls: ['./chip.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChipComponent {\n  @Input() variant: ChipVariant = 'assist';\n  @Input() size: ChipSize = 'md';\n  @Input() elevation: ChipElevation = 'flat';\n  @Input() disabled = false;\n  @Input() selected = false;\n  @Input() clickable = true;\n  @Input() removable = false;\n  @Input() hasLeadingIcon = false;\n  @Input() hasTrailingIcon = false;\n  @Input() hasAvatar = false;\n  @Input() customClass = '';\n  @Input() ariaLabel = '';\n  @Input() ariaPressed: boolean | null = null;\n  @Input() removeAriaLabel = '';\n  @Input() testId = '';\n  @Input() inList = false;\n\n  @Output() clicked = new EventEmitter<MouseEvent>();\n  @Output() removed = new EventEmitter<MouseEvent>();\n  @Output() focused = new EventEmitter<FocusEvent>();\n  @Output() blurred = new EventEmitter<FocusEvent>();\n  @Output() selectionChange = new EventEmitter<boolean>();\n\n  get role(): string {\n    // Avoid nested interactive elements - if removable, don't set interactive roles on container\n    if (this.removable) return '';\n    if (this.variant === 'filter') return 'checkbox';\n    // Only make the chip interactive if it's clickable AND not removable (to avoid nested interactive elements)\n    return this.clickable && !this.disabled ? 'button' : '';\n  }\n\n  getTabIndex(): number {\n    if (this.disabled) return -1;\n    // Avoid nested interactive elements - if removable, don't make container focusable\n    if (this.removable) return -1;\n    // Make clickable chips focusable\n    if (this.clickable) return 0;\n    // Filter chips should be focusable for selection\n    if (this.variant === 'filter') return 0;\n    return -1;\n  }\n\n  getAriaLabel(): string {\n    return this.ariaLabel || '';\n  }\n\n  getRemoveAriaLabel(): string {\n    if (this.removeAriaLabel) {\n      return this.removeAriaLabel;\n    }\n\n    // Provide a meaningful default for the remove button\n    return this.ariaLabel ? `Remove ${this.ariaLabel}` : 'Remove chip';\n  }\n\n  get chipClasses(): string {\n    const classes = [\n      'qk-chip',\n      `qk-chip--${this.variant}`,\n      `qk-chip--${this.size}`,\n      `qk-chip--${this.elevation}`,\n    ];\n\n    if (this.disabled) classes.push('qk-chip--disabled');\n    if (this.selected) classes.push('qk-chip--selected');\n    if (this.clickable && !this.disabled) classes.push('qk-chip--clickable');\n    if (this.removable) classes.push('qk-chip--removable');\n    if (this.hasLeadingIcon) classes.push('qk-chip--has-leading-icon');\n    if (this.hasTrailingIcon) classes.push('qk-chip--has-trailing-icon');\n    if (this.hasAvatar) classes.push('qk-chip--has-avatar');\n    if (this.customClass) classes.push(this.customClass);\n\n    return classes.join(' ');\n  }\n\n  handleClick(event: MouseEvent): void {\n    if (this.disabled || !this.clickable) return;\n\n    // If this is a removable chip, only handle click if it's not on the remove button\n    if (this.removable) {\n      const target = event.target as HTMLElement;\n      const removeButton = target.closest('.qk-chip__remove-button');\n      if (removeButton) return; // Let the remove button handle its own click\n    }\n\n    this.clicked.emit(event);\n\n    if (this.variant === 'filter') {\n      this.selected = !this.selected;\n      this.selectionChange.emit(this.selected);\n    }\n  }\n\n  handleRemove(event: MouseEvent): void {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this.removed.emit(event);\n    }\n  }\n\n  handleRemoveKeydown(event: KeyboardEvent): void {\n    if ((event.key === 'Enter' || event.key === ' ') && !this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.removed.emit(event as any);\n    }\n  }\n\n  handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled || !this.clickable) return;\n\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      this.handleClick(event as any);\n    }\n  }\n\n  handleFocus(event: FocusEvent): void {\n    this.focused.emit(event);\n  }\n\n  handleBlur(event: FocusEvent): void {\n    this.blurred.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../../../quanta-kit-styles/src/components/chip.module.scss' as *;\r\n\r\n// All chip styles are now provided by the shared quanta-kit-styles package.\r\n// This file only includes the shared module. Remove all local styles.\r\n",
                    "styleUrl": "./chip.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "role": {
                    "name": "role",
                    "getSignature": {
                        "name": "role",
                        "type": "string",
                        "returnType": "string",
                        "line": 46
                    }
                },
                "chipClasses": {
                    "name": "chipClasses",
                    "getSignature": {
                        "name": "chipClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 78
                    }
                }
            },
            "templateData": "<div\r\n  [class]=\"chipClasses\"\r\n  [attr.role]=\"role\"\r\n  [attr.aria-label]=\"getAriaLabel()\"\r\n  [attr.aria-checked]=\"role === 'checkbox' && variant === 'filter' ? selected : null\"\r\n  [attr.aria-disabled]=\"disabled\"\r\n  [attr.data-testid]=\"testId\"\r\n  (click)=\"handleClick($event)\"\r\n  (keydown)=\"handleKeydown($event)\"\r\n  (focus)=\"handleFocus($event)\"\r\n  (blur)=\"handleBlur($event)\"\r\n  [tabindex]=\"getTabIndex()\"\r\n>\r\n  <!-- Leading Icon -->\r\n  <span [style.display]=\"hasLeadingIcon ? 'inline' : 'none'\" class=\"qk-chip__icon qk-chip__icon--leading\" aria-hidden=\"true\">\r\n    <ng-content select=\"[leading-icon]\"></ng-content>\r\n  </span>\r\n\r\n  <!-- Avatar -->\r\n  <span [style.display]=\"hasAvatar ? 'inline' : 'none'\" class=\"qk-chip__avatar\" aria-hidden=\"true\">\r\n    <ng-content select=\"[avatar]\"></ng-content>\r\n  </span>\r\n\r\n  <!-- Label -->\r\n  <span class=\"qk-chip__label\">\r\n    <ng-content></ng-content>\r\n  </span>\r\n\r\n  <!-- Trailing Icon -->\r\n  <span [style.display]=\"hasTrailingIcon ? 'inline' : 'none'\" class=\"qk-chip__icon qk-chip__icon--trailing\" aria-hidden=\"true\">\r\n    <ng-content select=\"[trailing-icon]\"></ng-content>\r\n  </span>\r\n\r\n  <!-- Remove Button -->\r\n  <button\r\n    [style.display]=\"removable ? 'inline-flex' : 'none'\"\r\n    type=\"button\"\r\n    class=\"qk-chip__remove-button\"\r\n    [attr.aria-label]=\"getRemoveAriaLabel()\"\r\n    [disabled]=\"disabled\"\r\n    [tabindex]=\"disabled ? -1 : 0\"\r\n    (click)=\"handleRemove($event)\"\r\n    (keydown)=\"handleRemoveKeydown($event)\"\r\n    (focus)=\"$event.stopPropagation()\"\r\n  >\r\n    <span class=\"qk-chip__remove-icon\" aria-hidden=\"true\">\r\n      <ng-content select=\"[remove-icon]\">×</ng-content>\r\n    </span>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-2f9af16b92933e18dac0370e9ba1c26235560b504224b3c5a648071b19028f4fa42111dae1f1c1b7e8f61cffef6c2e081989242d252d2f296eb803f673a4da4e",
            "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qk-tooltip",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideDelay",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "maxWidth",
                    "defaultValue": "'320px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "offset",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "persistent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "TooltipPosition",
                    "decorators": []
                },
                {
                    "name": "showDelay",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "trigger",
                    "defaultValue": "'hover'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "TooltipTrigger",
                    "decorators": []
                },
                {
                    "name": "triggerTabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'plain'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "TooltipType",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "tooltipHide",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "EventEmitter"
                },
                {
                    "name": "tooltipShow",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "tooltipToggle",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "hasInteractiveChildren",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "hideTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isVisible",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "showTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tooltipElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tooltipElement'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "tooltipId",
                    "defaultValue": "`qk-tooltip-${Date.now()}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "triggerElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'triggerElement', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearTimeouts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "detectInteractiveChildren",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTooltipMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTooltipMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTriggerBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTriggerClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTriggerFocus",
                    "args": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "FocusEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTriggerMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTriggerMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scheduleHide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scheduleShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewChild,\n  ElementRef,\n  OnDestroy,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  OnInit,\n  signal,\n  computed,\n  effect,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nexport type TooltipPosition =\n  | 'top'\n  | 'bottom'\n  | 'left'\n  | 'right'\n  | 'top-start'\n  | 'top-end'\n  | 'bottom-start'\n  | 'bottom-end'\n  | 'left-start'\n  | 'left-end'\n  | 'right-start'\n  | 'right-end';\nexport type TooltipTrigger = 'hover' | 'focus' | 'click' | 'manual';\nexport type TooltipType = 'plain' | 'rich';\n\n@Component({\n  selector: 'qk-tooltip',\n  standalone: true,\n  imports: [CommonModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.scss'],\n})\nexport class TooltipComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() text: string = '';\n  @Input() position: TooltipPosition = 'top';\n  @Input() trigger: TooltipTrigger = 'hover';\n  @Input() type: TooltipType = 'plain';\n  @Input() disabled: boolean = false;\n  @Input() showDelay: number = 500; // Material 3 spec: 500ms delay\n  @Input() hideDelay: number = 0;\n  @Input() persistent: boolean = false; // For rich tooltips\n  @Input() customClass: string = '';\n  @Input() maxWidth: string = '320px'; // Material 3 spec\n  @Input() triggerTabIndex: number = 0;\n  @Input() offset: number = 8; // Distance from trigger element\n\n  @Output() tooltipShow = new EventEmitter<void>();\n  @Output() tooltipHide = new EventEmitter<void>();\n  @Output() tooltipToggle = new EventEmitter<boolean>();\n\n  @ViewChild('triggerElement', { static: true })\n  triggerElement!: ElementRef<HTMLElement>;\n  @ViewChild('tooltipElement') tooltipElement?: ElementRef<HTMLElement>;\n\n  // Signals for reactive state management\n  isVisible = signal(false);\n  tooltipId = `qk-tooltip-${Date.now()}`;\n\n  // Simple accessibility state\n  hasInteractiveChildren = signal(false);\n\n  // Computed class and style strings\n  get tooltipClasses(): string {\n    const classes = [\n      'qk-tooltip',\n      `qk-tooltip--${this.position}`,\n      `qk-tooltip--${this.type}`,\n    ];\n    if (this.customClass) classes.push(this.customClass);\n    if (this.persistent) classes.push('qk-tooltip--persistent');\n    return classes.join(' ');\n  }\n\n  get arrowClasses(): string {\n    return `qk-tooltip-arrow qk-tooltip-arrow--${this.position}`;\n  }\n\n  get tooltipStyles(): object {\n    return { 'max-width': this.maxWidth, 'z-index': '1000' };\n  }\n\n  private showTimeout?: number;\n  private hideTimeout?: number;\n\n  ngOnInit(): void {\n    if (!this.text && this.type === 'plain') {\n      console.warn('qk-tooltip: text is required for plain tooltips');\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.detectInteractiveChildren();\n  }\n\n  private detectInteractiveChildren(): void {\n    if (!this.triggerElement?.nativeElement) {\n      this.hasInteractiveChildren.set(false);\n      return;\n    }\n\n    const interactiveElements =\n      this.triggerElement.nativeElement.querySelectorAll(\n        'button, a, input, select, textarea',\n      );\n    this.hasInteractiveChildren.set(interactiveElements.length > 0);\n  }\n\n  ngOnDestroy(): void {\n    this.clearTimeouts();\n  }\n\n  // Trigger event handlers\n  onTriggerMouseEnter(): void {\n    if (this.disabled || this.trigger !== 'hover') return;\n\n    this.clearTimeouts();\n    this.scheduleShow();\n  }\n\n  onTriggerMouseLeave(): void {\n    if (this.disabled || this.trigger !== 'hover') return;\n\n    this.clearTimeouts();\n    this.scheduleHide();\n  }\n\n  onTriggerFocus(event?: FocusEvent): void {\n    if (this.disabled || this.trigger !== 'focus') return;\n\n    this.clearTimeouts();\n    this.scheduleShow();\n  }\n\n  onTriggerBlur(event?: FocusEvent): void {\n    if (this.disabled || this.trigger !== 'focus') return;\n\n    this.clearTimeouts();\n    this.scheduleHide();\n  }\n\n  onTriggerClick(event?: MouseEvent): void {\n    if (this.disabled || this.trigger !== 'click') return;\n\n    this.toggle();\n  }\n\n  // Tooltip event handlers - simplified\n  onTooltipMouseEnter(): void {\n    // Keep tooltip visible when hovering over it\n  }\n\n  onTooltipMouseLeave(): void {\n    // Hide tooltip when leaving it\n    if (this.trigger === 'hover') {\n      this.scheduleHide();\n    }\n  }\n\n  // Public API methods\n  show(): void {\n    if (this.disabled || this.isVisible()) return;\n\n    this.clearTimeouts();\n    this.isVisible.set(true);\n    this.tooltipShow.emit();\n    this.tooltipToggle.emit(true);\n  }\n\n  hide(): void {\n    if (!this.isVisible()) return;\n\n    this.clearTimeouts();\n    this.isVisible.set(false);\n    this.tooltipHide.emit();\n    this.tooltipToggle.emit(false);\n  }\n\n  toggle(): void {\n    this.isVisible() ? this.hide() : this.show();\n  }\n\n  // Simplified private methods\n  private scheduleShow(): void {\n    this.clearTimeouts();\n    this.showTimeout = window.setTimeout(() => this.show(), this.showDelay);\n  }\n\n  private scheduleHide(): void {\n    this.clearTimeouts();\n    this.hideTimeout = window.setTimeout(() => this.hide(), this.hideDelay);\n  }\n\n  private clearTimeouts(): void {\n    if (this.showTimeout) {\n      clearTimeout(this.showTimeout);\n      this.showTimeout = undefined;\n    }\n    if (this.hideTimeout) {\n      clearTimeout(this.hideTimeout);\n      this.hideTimeout = undefined;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '../../../../../../quanta-kit-styles/src/components/tooltip.module.scss' as *;\r\n\r\n// All tooltip styles are now provided by the shared quanta-kit-styles package.\r\n// This file only includes the shared module. Remove all local styles.\r\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "tooltipClasses": {
                    "name": "tooltipClasses",
                    "getSignature": {
                        "name": "tooltipClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 73
                    }
                },
                "arrowClasses": {
                    "name": "arrowClasses",
                    "getSignature": {
                        "name": "arrowClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 84
                    }
                },
                "tooltipStyles": {
                    "name": "tooltipStyles",
                    "getSignature": {
                        "name": "tooltipStyles",
                        "type": "object",
                        "returnType": "object",
                        "line": 88
                    }
                }
            },
            "templateData": "<div \r\n  #triggerElement\r\n  class=\"qk-tooltip-trigger\"\r\n  [attr.aria-describedby]=\"!hasInteractiveChildren() && isVisible() ? tooltipId : null\"\r\n  [attr.aria-expanded]=\"!hasInteractiveChildren() ? isVisible() : null\"\r\n  (mouseenter)=\"onTriggerMouseEnter()\"\r\n  (mouseleave)=\"onTriggerMouseLeave()\"\r\n  (focus)=\"onTriggerFocus($event)\"\r\n  (blur)=\"onTriggerBlur($event)\"\r\n  (click)=\"onTriggerClick($event)\"\r\n  [attr.tabindex]=\"!hasInteractiveChildren() ? triggerTabIndex : null\"\r\n  [attr.role]=\"!hasInteractiveChildren() ? 'button' : null\">\r\n  <ng-content></ng-content>\r\n</div>\r\n\r\n@if (isVisible()) {\r\n  <div \r\n    #tooltipElement\r\n    [id]=\"tooltipId\"\r\n    class=\"qk-tooltip\"\r\n    [class]=\"tooltipClasses\"\r\n    [style]=\"tooltipStyles\"\r\n    role=\"tooltip\"\r\n    [attr.aria-hidden]=\"!isVisible()\"\r\n    (mouseenter)=\"onTooltipMouseEnter()\"\r\n    (mouseleave)=\"onTooltipMouseLeave()\">\r\n    \r\n    @if (type === 'plain') {\r\n      <div class=\"qk-tooltip-text\">{{ text }}</div>\r\n    } @else {\r\n      <div class=\"qk-tooltip-rich\">\r\n        <ng-content select=\"[slot=tooltip-content]\"></ng-content>\r\n      </div>\r\n    }\r\n    \r\n    <div class=\"qk-tooltip-arrow\" [class]=\"arrowClasses\"></div>\r\n  </div>\r\n}\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "AssistChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'assist',\n    size: 'md',\n    elevation: 'flat',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-chip \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [elevation]=\"elevation\"\n      [disabled]=\"disabled\"\n      (clicked)=\"clicked($event)\">\n      Assist Chip\n    </qk-chip>`,\n  }),\n}"
            },
            {
                "name": "BottomPosition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    text: 'Tooltip positioned on bottom',\n    position: 'bottom',\n    trigger: 'hover',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"padding: 50px; text-align: center;\">\n        <qk-tooltip \n          [text]=\"text\" \n          [position]=\"position\" \n          [trigger]=\"trigger\">\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Bottom Tooltip\n          </button>\n        </qk-tooltip>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    text: 'This is a simple tooltip',\n    position: 'top',\n    trigger: 'hover',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"padding: 50px; text-align: center;\">\n        <qk-tooltip \n          [text]=\"text\" \n          [position]=\"position\" \n          [trigger]=\"trigger\">\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Hover me\n          </button>\n        </qk-tooltip>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: true,\n    size: 'md',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [disabled]=\"disabled\">\n      Disabled Button\n    </qk-button>`,\n  }),\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    text: 'This tooltip is disabled',\n    position: 'top',\n    trigger: 'hover',\n    disabled: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"padding: 50px; text-align: center;\">\n        <qk-tooltip \n          [text]=\"text\" \n          [position]=\"position\" \n          [trigger]=\"trigger\"\n          [disabled]=\"disabled\">\n          <button style=\"padding: 8px 16px; background: #666; color: white; border: none; border-radius: 4px; cursor: not-allowed;\">\n            Disabled Tooltip\n          </button>\n        </qk-tooltip>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "FilterChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'filter',\n    size: 'md',\n    elevation: 'flat',\n    selected: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-chip \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [elevation]=\"elevation\"\n      [selected]=\"selected\"\n      [disabled]=\"disabled\"\n      (clicked)=\"clicked($event)\"\n      (selectionChange)=\"selectionChange($event)\">\n      Filter Chip\n    </qk-chip>`,\n  }),\n}"
            },
            {
                "name": "InputChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'input',\n    size: 'md',\n    elevation: 'flat',\n    removable: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-chip \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [elevation]=\"elevation\"\n      [removable]=\"removable\"\n      [disabled]=\"disabled\"\n      (clicked)=\"clicked($event)\"\n      (removed)=\"removed($event)\">\n      Input Chip\n    </qk-chip>`,\n  }),\n}"
            },
            {
                "name": "LeftPosition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    text: 'Tooltip positioned on left',\n    position: 'left',\n    trigger: 'hover',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"padding: 50px; text-align: center;\">\n        <qk-tooltip \n          [text]=\"text\" \n          [position]=\"position\" \n          [trigger]=\"trigger\">\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Left Tooltip\n          </button>\n        </qk-tooltip>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    loading: true,\n    size: 'md',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [loading]=\"loading\">\n      Loading Button\n    </qk-button>`,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Components/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [ButtonComponent],\n    }),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        component: `\nThe Button component is a versatile UI element that supports various styles, sizes, and states.\nIt provides comprehensive functionality including loading states, accessibility features, and customization options.\n\n## Features\n- Multiple variants (primary, secondary, success, danger, warning, info, light, dark, and outline versions)\n- Various sizes (xs, sm, md, lg, xl)\n- Loading state with spinner\n- Disabled state\n- Full width option\n- Rounded and square variations\n- Accessibility support with ARIA attributes\n- Event emissions for click, focus, and blur\n- Icon slot support (left and right)\n- Keyboard navigation support\n\n## Usage\n\\`\\`\\`html\n<qk-button variant=\"primary\" size=\"md\" (clicked)=\"handleClick($event)\">\n  Click me\n</qk-button>\n\\`\\`\\`\n\n## With Icons\n\\`\\`\\`html\n<qk-button variant=\"primary\">\n  <svg slot=\"icon-left\" width=\"16\" height=\"16\">...</svg>\n  Save Changes\n  <svg slot=\"icon-right\" width=\"16\" height=\"16\">...</svg>\n</qk-button>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: [\n        'primary',\n        'secondary',\n        'success',\n        'danger',\n        'warning',\n        'info',\n        'light',\n        'dark',\n        'outline-primary',\n        'outline-secondary',\n        'outline-success',\n        'outline-danger',\n        'outline-warning',\n        'outline-info',\n        'outline-light',\n        'outline-dark',\n      ] as ButtonVariant[],\n      description: 'The visual style variant of the button',\n    },\n    size: {\n      control: 'select',\n      options: ['xs', 'sm', 'md', 'lg', 'xl'] as ButtonSize[],\n      description: 'The size of the button',\n    },\n    type: {\n      control: 'select',\n      options: ['button', 'submit', 'reset'] as ButtonType[],\n      description: 'The HTML type attribute of the button',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the button is disabled',\n    },\n    loading: {\n      control: 'boolean',\n      description: 'Whether the button is in loading state',\n    },\n    hideTextOnLoading: {\n      control: 'boolean',\n      description: 'Whether to hide text content when loading',\n    },\n    fullWidth: {\n      control: 'boolean',\n      description: 'Whether the button should take full width',\n    },\n    rounded: {\n      control: 'boolean',\n      description: 'Whether the button has rounded corners',\n    },\n    square: {\n      control: 'boolean',\n      description: 'Whether the button has no border radius',\n    },\n    customClass: {\n      control: 'text',\n      description: 'Custom CSS classes to apply',\n    },\n    ariaLabel: {\n      control: 'text',\n      description: 'ARIA label for accessibility',\n    },\n    testId: {\n      control: 'text',\n      description: 'Test ID for testing purposes',\n    },\n    clicked: {\n      action: 'clicked',\n      description: 'Event emitted when button is clicked',\n    },\n    focused: {\n      action: 'focused',\n      description: 'Event emitted when button receives focus',\n    },\n    blurred: {\n      action: 'blurred',\n      description: 'Event emitted when button loses focus',\n    },\n  },\n  args: {\n    clicked: fn(),\n    focused: fn(),\n    blurred: fn(),\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TooltipComponent>",
                "defaultValue": "{\n  title: 'Components/Tooltip',\n  component: TooltipComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [TooltipComponent],\n    }),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        component: `\nThe Tooltip component provides contextual information when users hover, focus, or click on an element.\nBased on Material Design 3 guidelines for tooltips.\n\n## Features\n- Multiple positions (top, bottom, left, right)\n- Different trigger types (hover, click, focus)\n- Plain and rich content support\n- Customizable delays and styling\n- Accessibility support with ARIA attributes\n- Keyboard navigation\n\n## Usage\n\\`\\`\\`html\n<qk-tooltip text=\"Helpful information\" position=\"top\">\n  <button>Hover me</button>\n</qk-tooltip>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  argTypes: {\n    text: {\n      control: 'text',\n      description: 'Tooltip text content',\n    },\n    position: {\n      control: 'select',\n      options: ['top', 'bottom', 'left', 'right'] as TooltipPosition[],\n      description: 'Position of the tooltip relative to trigger',\n    },\n    trigger: {\n      control: 'select',\n      options: ['hover', 'click', 'focus'] as TooltipTrigger[],\n      description: 'How the tooltip is triggered',\n    },\n    type: {\n      control: 'select',\n      options: ['plain', 'rich'] as TooltipType[],\n      description: 'Type of tooltip content',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the tooltip is disabled',\n    },\n    showDelay: {\n      control: 'number',\n      description: 'Delay before showing tooltip (ms)',\n    },\n    hideDelay: {\n      control: 'number',\n      description: 'Delay before hiding tooltip (ms)',\n    },\n    persistent: {\n      control: 'boolean',\n      description: 'Whether tooltip stays open until explicitly closed',\n    },\n    customClass: {\n      control: 'text',\n      description: 'Custom CSS classes',\n    },\n    maxWidth: {\n      control: 'text',\n      description: 'Maximum width of tooltip',\n    },\n    offset: {\n      control: 'number',\n      description: 'Distance from trigger element in pixels',\n    },\n  },\n  tags: ['autodocs'],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ChipComponent>",
                "defaultValue": "{\n  title: 'Components/Chip',\n  component: ChipComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [ChipComponent],\n    }),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        component: `\nThe Chip component implements Material Design 3 chip variants for compact information display and user interaction.\n\n## Features\n- Four chip variants (assist, filter, input, suggestion)\n- Multiple sizes (sm, md)\n- Elevation options (flat, elevated)\n- Selection states for filter chips\n- Removable functionality for input chips\n- Icon and avatar support\n- Accessibility features with ARIA attributes\n- Keyboard navigation support\n\n## Usage\n\\`\\`\\`html\n<qk-chip variant=\"filter\" [selected]=\"isSelected\" (selectionChange)=\"onSelectionChange($event)\">\n  Filter Option\n</qk-chip>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['assist', 'filter', 'input', 'suggestion'] as ChipVariant[],\n      description: 'The type of chip',\n    },\n    size: {\n      control: 'select',\n      options: ['sm', 'md'] as ChipSize[],\n      description: 'The size of the chip',\n    },\n    elevation: {\n      control: 'select',\n      options: ['flat', 'elevated'] as ChipElevation[],\n      description: 'The elevation level of the chip',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the chip is disabled',\n    },\n    selected: {\n      control: 'boolean',\n      description: 'Whether the chip is selected (filter chips only)',\n    },\n    removable: {\n      control: 'boolean',\n      description: 'Whether the chip can be removed (input chips only)',\n    },\n    hasLeadingIcon: {\n      control: 'boolean',\n      description: 'Whether the chip has a leading icon',\n    },\n    hasTrailingIcon: {\n      control: 'boolean',\n      description: 'Whether the chip has a trailing icon',\n    },\n    hasAvatar: {\n      control: 'boolean',\n      description: 'Whether the chip has an avatar',\n    },\n    customClass: {\n      control: 'text',\n      description: 'Custom CSS classes to apply',\n    },\n    ariaLabel: {\n      control: 'text',\n      description: 'ARIA label for accessibility',\n    },\n    removeAriaLabel: {\n      control: 'text',\n      description: 'ARIA label for the remove button',\n    },\n    testId: {\n      control: 'text',\n      description: 'Test ID for testing purposes',\n    },\n    clicked: {\n      action: 'clicked',\n      description: 'Event emitted when chip is clicked',\n    },\n    removed: {\n      action: 'removed',\n      description: 'Event emitted when chip is removed',\n    },\n    focused: {\n      action: 'focused',\n      description: 'Event emitted when chip receives focus',\n    },\n    blurred: {\n      action: 'blurred',\n      description: 'Event emitted when chip loses focus',\n    },\n    selectionChange: {\n      action: 'selectionChange',\n      description: 'Event emitted when chip selection changes',\n    },\n  },\n  args: {\n    clicked: fn(),\n    removed: fn(),\n    focused: fn(),\n    blurred: fn(),\n    selectionChange: fn(),\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    size: 'md',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [disabled]=\"disabled\" \n      [loading]=\"loading\"\n      (clicked)=\"clicked($event)\">\n      Primary Button\n    </qk-button>`,\n  }),\n}"
            },
            {
                "name": "RightPosition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    text: 'Tooltip positioned on right',\n    position: 'right',\n    trigger: 'hover',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"padding: 50px; text-align: center;\">\n        <qk-tooltip \n          [text]=\"text\" \n          [position]=\"position\" \n          [trigger]=\"trigger\">\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Right Tooltip\n          </button>\n        </qk-tooltip>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'secondary',\n    size: 'md',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [disabled]=\"disabled\" \n      [loading]=\"loading\"\n      (clicked)=\"clicked($event)\">\n      Secondary Button\n    </qk-button>`,\n  }),\n}"
            },
            {
                "name": "SuggestionChip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'suggestion',\n    size: 'md',\n    elevation: 'flat',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-chip \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [elevation]=\"elevation\"\n      [disabled]=\"disabled\"\n      (clicked)=\"clicked($event)\">\n      Suggestion Chip\n    </qk-chip>`,\n  }),\n}"
            },
            {
                "name": "TopPosition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    text: 'Tooltip positioned on top',\n    position: 'top',\n    trigger: 'hover',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"padding: 50px; text-align: center;\">\n        <qk-tooltip \n          [text]=\"text\" \n          [position]=\"position\" \n          [trigger]=\"trigger\">\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Top Tooltip\n          </button>\n        </qk-tooltip>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    size: 'md',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\">\n      <svg slot=\"icon-left\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/>\n      </svg>\n      Add Item\n    </qk-button>`,\n  }),\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
                "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Supported button sizes</p>\n",
                "kind": 192
            },
            {
                "name": "ButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"button\" | \"submit\" | \"reset\"",
                "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Supported button types for form submission</p>\n",
                "kind": 192
            },
            {
                "name": "ButtonVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\" | \"outline-primary\" | \"outline-secondary\" | \"outline-success\" | \"outline-danger\" | \"outline-warning\" | \"outline-info\" | \"outline-light\" | \"outline-dark\"",
                "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Supported button visual variants</p>\n",
                "kind": 192
            },
            {
                "name": "ChipElevation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"flat\" | \"elevated\"",
                "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ChipSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sm\" | \"md\"",
                "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ChipVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"assist\" | \"filter\" | \"input\" | \"suggestion\"",
                "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TooltipComponent>",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ChipComponent>",
                "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TooltipPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"right-start\" | \"right-end\"",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TooltipTrigger",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"hover\" | \"focus\" | \"click\" | \"manual\"",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TooltipType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"plain\" | \"rich\"",
                "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/quanta-kit/src/lib/Chip/chip.stories.ts": [
                {
                    "name": "AssistChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'assist',\n    size: 'md',\n    elevation: 'flat',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-chip \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [elevation]=\"elevation\"\n      [disabled]=\"disabled\"\n      (clicked)=\"clicked($event)\">\n      Assist Chip\n    </qk-chip>`,\n  }),\n}"
                },
                {
                    "name": "FilterChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'filter',\n    size: 'md',\n    elevation: 'flat',\n    selected: false,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-chip \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [elevation]=\"elevation\"\n      [selected]=\"selected\"\n      [disabled]=\"disabled\"\n      (clicked)=\"clicked($event)\"\n      (selectionChange)=\"selectionChange($event)\">\n      Filter Chip\n    </qk-chip>`,\n  }),\n}"
                },
                {
                    "name": "InputChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'input',\n    size: 'md',\n    elevation: 'flat',\n    removable: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-chip \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [elevation]=\"elevation\"\n      [removable]=\"removable\"\n      [disabled]=\"disabled\"\n      (clicked)=\"clicked($event)\"\n      (removed)=\"removed($event)\">\n      Input Chip\n    </qk-chip>`,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ChipComponent>",
                    "defaultValue": "{\n  title: 'Components/Chip',\n  component: ChipComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [ChipComponent],\n    }),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        component: `\nThe Chip component implements Material Design 3 chip variants for compact information display and user interaction.\n\n## Features\n- Four chip variants (assist, filter, input, suggestion)\n- Multiple sizes (sm, md)\n- Elevation options (flat, elevated)\n- Selection states for filter chips\n- Removable functionality for input chips\n- Icon and avatar support\n- Accessibility features with ARIA attributes\n- Keyboard navigation support\n\n## Usage\n\\`\\`\\`html\n<qk-chip variant=\"filter\" [selected]=\"isSelected\" (selectionChange)=\"onSelectionChange($event)\">\n  Filter Option\n</qk-chip>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['assist', 'filter', 'input', 'suggestion'] as ChipVariant[],\n      description: 'The type of chip',\n    },\n    size: {\n      control: 'select',\n      options: ['sm', 'md'] as ChipSize[],\n      description: 'The size of the chip',\n    },\n    elevation: {\n      control: 'select',\n      options: ['flat', 'elevated'] as ChipElevation[],\n      description: 'The elevation level of the chip',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the chip is disabled',\n    },\n    selected: {\n      control: 'boolean',\n      description: 'Whether the chip is selected (filter chips only)',\n    },\n    removable: {\n      control: 'boolean',\n      description: 'Whether the chip can be removed (input chips only)',\n    },\n    hasLeadingIcon: {\n      control: 'boolean',\n      description: 'Whether the chip has a leading icon',\n    },\n    hasTrailingIcon: {\n      control: 'boolean',\n      description: 'Whether the chip has a trailing icon',\n    },\n    hasAvatar: {\n      control: 'boolean',\n      description: 'Whether the chip has an avatar',\n    },\n    customClass: {\n      control: 'text',\n      description: 'Custom CSS classes to apply',\n    },\n    ariaLabel: {\n      control: 'text',\n      description: 'ARIA label for accessibility',\n    },\n    removeAriaLabel: {\n      control: 'text',\n      description: 'ARIA label for the remove button',\n    },\n    testId: {\n      control: 'text',\n      description: 'Test ID for testing purposes',\n    },\n    clicked: {\n      action: 'clicked',\n      description: 'Event emitted when chip is clicked',\n    },\n    removed: {\n      action: 'removed',\n      description: 'Event emitted when chip is removed',\n    },\n    focused: {\n      action: 'focused',\n      description: 'Event emitted when chip receives focus',\n    },\n    blurred: {\n      action: 'blurred',\n      description: 'Event emitted when chip loses focus',\n    },\n    selectionChange: {\n      action: 'selectionChange',\n      description: 'Event emitted when chip selection changes',\n    },\n  },\n  args: {\n    clicked: fn(),\n    removed: fn(),\n    focused: fn(),\n    blurred: fn(),\n    selectionChange: fn(),\n  },\n}"
                },
                {
                    "name": "SuggestionChip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'suggestion',\n    size: 'md',\n    elevation: 'flat',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-chip \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [elevation]=\"elevation\"\n      [disabled]=\"disabled\"\n      (clicked)=\"clicked($event)\">\n      Suggestion Chip\n    </qk-chip>`,\n  }),\n}"
                }
            ],
            "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts": [
                {
                    "name": "BottomPosition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    text: 'Tooltip positioned on bottom',\n    position: 'bottom',\n    trigger: 'hover',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"padding: 50px; text-align: center;\">\n        <qk-tooltip \n          [text]=\"text\" \n          [position]=\"position\" \n          [trigger]=\"trigger\">\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Bottom Tooltip\n          </button>\n        </qk-tooltip>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    text: 'This is a simple tooltip',\n    position: 'top',\n    trigger: 'hover',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"padding: 50px; text-align: center;\">\n        <qk-tooltip \n          [text]=\"text\" \n          [position]=\"position\" \n          [trigger]=\"trigger\">\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Hover me\n          </button>\n        </qk-tooltip>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    text: 'This tooltip is disabled',\n    position: 'top',\n    trigger: 'hover',\n    disabled: true,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"padding: 50px; text-align: center;\">\n        <qk-tooltip \n          [text]=\"text\" \n          [position]=\"position\" \n          [trigger]=\"trigger\"\n          [disabled]=\"disabled\">\n          <button style=\"padding: 8px 16px; background: #666; color: white; border: none; border-radius: 4px; cursor: not-allowed;\">\n            Disabled Tooltip\n          </button>\n        </qk-tooltip>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "LeftPosition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    text: 'Tooltip positioned on left',\n    position: 'left',\n    trigger: 'hover',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"padding: 50px; text-align: center;\">\n        <qk-tooltip \n          [text]=\"text\" \n          [position]=\"position\" \n          [trigger]=\"trigger\">\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Left Tooltip\n          </button>\n        </qk-tooltip>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TooltipComponent>",
                    "defaultValue": "{\n  title: 'Components/Tooltip',\n  component: TooltipComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [TooltipComponent],\n    }),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        component: `\nThe Tooltip component provides contextual information when users hover, focus, or click on an element.\nBased on Material Design 3 guidelines for tooltips.\n\n## Features\n- Multiple positions (top, bottom, left, right)\n- Different trigger types (hover, click, focus)\n- Plain and rich content support\n- Customizable delays and styling\n- Accessibility support with ARIA attributes\n- Keyboard navigation\n\n## Usage\n\\`\\`\\`html\n<qk-tooltip text=\"Helpful information\" position=\"top\">\n  <button>Hover me</button>\n</qk-tooltip>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  argTypes: {\n    text: {\n      control: 'text',\n      description: 'Tooltip text content',\n    },\n    position: {\n      control: 'select',\n      options: ['top', 'bottom', 'left', 'right'] as TooltipPosition[],\n      description: 'Position of the tooltip relative to trigger',\n    },\n    trigger: {\n      control: 'select',\n      options: ['hover', 'click', 'focus'] as TooltipTrigger[],\n      description: 'How the tooltip is triggered',\n    },\n    type: {\n      control: 'select',\n      options: ['plain', 'rich'] as TooltipType[],\n      description: 'Type of tooltip content',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the tooltip is disabled',\n    },\n    showDelay: {\n      control: 'number',\n      description: 'Delay before showing tooltip (ms)',\n    },\n    hideDelay: {\n      control: 'number',\n      description: 'Delay before hiding tooltip (ms)',\n    },\n    persistent: {\n      control: 'boolean',\n      description: 'Whether tooltip stays open until explicitly closed',\n    },\n    customClass: {\n      control: 'text',\n      description: 'Custom CSS classes',\n    },\n    maxWidth: {\n      control: 'text',\n      description: 'Maximum width of tooltip',\n    },\n    offset: {\n      control: 'number',\n      description: 'Distance from trigger element in pixels',\n    },\n  },\n  tags: ['autodocs'],\n}"
                },
                {
                    "name": "RightPosition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    text: 'Tooltip positioned on right',\n    position: 'right',\n    trigger: 'hover',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"padding: 50px; text-align: center;\">\n        <qk-tooltip \n          [text]=\"text\" \n          [position]=\"position\" \n          [trigger]=\"trigger\">\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Right Tooltip\n          </button>\n        </qk-tooltip>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "TopPosition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    text: 'Tooltip positioned on top',\n    position: 'top',\n    trigger: 'hover',\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"padding: 50px; text-align: center;\">\n        <qk-tooltip \n          [text]=\"text\" \n          [position]=\"position\" \n          [trigger]=\"trigger\">\n          <button style=\"padding: 8px 16px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n            Top Tooltip\n          </button>\n        </qk-tooltip>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/quanta-kit/src/lib/Button/button.stories.ts": [
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: true,\n    size: 'md',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [disabled]=\"disabled\">\n      Disabled Button\n    </qk-button>`,\n  }),\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    loading: true,\n    size: 'md',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [loading]=\"loading\">\n      Loading Button\n    </qk-button>`,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Components/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  decorators: [\n    moduleMetadata({\n      imports: [ButtonComponent],\n    }),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        component: `\nThe Button component is a versatile UI element that supports various styles, sizes, and states.\nIt provides comprehensive functionality including loading states, accessibility features, and customization options.\n\n## Features\n- Multiple variants (primary, secondary, success, danger, warning, info, light, dark, and outline versions)\n- Various sizes (xs, sm, md, lg, xl)\n- Loading state with spinner\n- Disabled state\n- Full width option\n- Rounded and square variations\n- Accessibility support with ARIA attributes\n- Event emissions for click, focus, and blur\n- Icon slot support (left and right)\n- Keyboard navigation support\n\n## Usage\n\\`\\`\\`html\n<qk-button variant=\"primary\" size=\"md\" (clicked)=\"handleClick($event)\">\n  Click me\n</qk-button>\n\\`\\`\\`\n\n## With Icons\n\\`\\`\\`html\n<qk-button variant=\"primary\">\n  <svg slot=\"icon-left\" width=\"16\" height=\"16\">...</svg>\n  Save Changes\n  <svg slot=\"icon-right\" width=\"16\" height=\"16\">...</svg>\n</qk-button>\n\\`\\`\\`\n        `,\n      },\n    },\n  },\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: [\n        'primary',\n        'secondary',\n        'success',\n        'danger',\n        'warning',\n        'info',\n        'light',\n        'dark',\n        'outline-primary',\n        'outline-secondary',\n        'outline-success',\n        'outline-danger',\n        'outline-warning',\n        'outline-info',\n        'outline-light',\n        'outline-dark',\n      ] as ButtonVariant[],\n      description: 'The visual style variant of the button',\n    },\n    size: {\n      control: 'select',\n      options: ['xs', 'sm', 'md', 'lg', 'xl'] as ButtonSize[],\n      description: 'The size of the button',\n    },\n    type: {\n      control: 'select',\n      options: ['button', 'submit', 'reset'] as ButtonType[],\n      description: 'The HTML type attribute of the button',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the button is disabled',\n    },\n    loading: {\n      control: 'boolean',\n      description: 'Whether the button is in loading state',\n    },\n    hideTextOnLoading: {\n      control: 'boolean',\n      description: 'Whether to hide text content when loading',\n    },\n    fullWidth: {\n      control: 'boolean',\n      description: 'Whether the button should take full width',\n    },\n    rounded: {\n      control: 'boolean',\n      description: 'Whether the button has rounded corners',\n    },\n    square: {\n      control: 'boolean',\n      description: 'Whether the button has no border radius',\n    },\n    customClass: {\n      control: 'text',\n      description: 'Custom CSS classes to apply',\n    },\n    ariaLabel: {\n      control: 'text',\n      description: 'ARIA label for accessibility',\n    },\n    testId: {\n      control: 'text',\n      description: 'Test ID for testing purposes',\n    },\n    clicked: {\n      action: 'clicked',\n      description: 'Event emitted when button is clicked',\n    },\n    focused: {\n      action: 'focused',\n      description: 'Event emitted when button receives focus',\n    },\n    blurred: {\n      action: 'blurred',\n      description: 'Event emitted when button loses focus',\n    },\n  },\n  args: {\n    clicked: fn(),\n    focused: fn(),\n    blurred: fn(),\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    size: 'md',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [disabled]=\"disabled\" \n      [loading]=\"loading\"\n      (clicked)=\"clicked($event)\">\n      Primary Button\n    </qk-button>`,\n  }),\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'secondary',\n    size: 'md',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\" \n      [disabled]=\"disabled\" \n      [loading]=\"loading\"\n      (clicked)=\"clicked($event)\">\n      Secondary Button\n    </qk-button>`,\n  }),\n}"
                },
                {
                    "name": "WithIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    size: 'md',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<qk-button \n      [variant]=\"variant\" \n      [size]=\"size\">\n      <svg slot=\"icon-left\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/>\n      </svg>\n      Add Item\n    </qk-button>`,\n  }),\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/quanta-kit/src/lib/Button/button.component.ts": [
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
                    "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Supported button sizes</p>\n",
                    "kind": 192
                },
                {
                    "name": "ButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"button\" | \"submit\" | \"reset\"",
                    "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Supported button types for form submission</p>\n",
                    "kind": 192
                },
                {
                    "name": "ButtonVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\" | \"outline-primary\" | \"outline-secondary\" | \"outline-success\" | \"outline-danger\" | \"outline-warning\" | \"outline-info\" | \"outline-light\" | \"outline-dark\"",
                    "file": "projects/quanta-kit/src/lib/Button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Supported button visual variants</p>\n",
                    "kind": 192
                }
            ],
            "projects/quanta-kit/src/lib/Chip/chip.component.ts": [
                {
                    "name": "ChipElevation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"flat\" | \"elevated\"",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ChipSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sm\" | \"md\"",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ChipVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"assist\" | \"filter\" | \"input\" | \"suggestion\"",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/quanta-kit/src/lib/Button/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TooltipComponent>",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/quanta-kit/src/lib/Chip/chip.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ChipComponent>",
                    "file": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts": [
                {
                    "name": "TooltipPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\" | \"right-start\" | \"right-end\"",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TooltipTrigger",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"hover\" | \"focus\" | \"click\" | \"manual\"",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TooltipType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"plain\" | \"rich\"",
                    "file": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 12,
        "status": "low",
        "files": [
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 100,
                "coverageCount": "20/20",
                "status": "very-good"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonSize",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonType",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonVariant",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Button/button.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ChipElevation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ChipSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ChipVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AssistChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FilterChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SuggestionChip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Chip/chip.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/40",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TooltipPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TooltipTrigger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TooltipType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BottomPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeftPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RightPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TopPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/quanta-kit/src/lib/Tooltip/tooltip.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}